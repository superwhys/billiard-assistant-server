// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package base

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		GamePo:     newGamePo(db, opts...),
		NoticePo:   newNoticePo(db, opts...),
		RoomPo:     newRoomPo(db, opts...),
		RoomUserPo: newRoomUserPo(db, opts...),
		UserPo:     newUserPo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	GamePo     gamePo
	NoticePo   noticePo
	RoomPo     roomPo
	RoomUserPo roomUserPo
	UserPo     userPo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		GamePo:     q.GamePo.clone(db),
		NoticePo:   q.NoticePo.clone(db),
		RoomPo:     q.RoomPo.clone(db),
		RoomUserPo: q.RoomUserPo.clone(db),
		UserPo:     q.UserPo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		GamePo:     q.GamePo.replaceDB(db),
		NoticePo:   q.NoticePo.replaceDB(db),
		RoomPo:     q.RoomPo.replaceDB(db),
		RoomUserPo: q.RoomUserPo.replaceDB(db),
		UserPo:     q.UserPo.replaceDB(db),
	}
}

type queryCtx struct {
	GamePo     IGamePoDo
	NoticePo   INoticePoDo
	RoomPo     IRoomPoDo
	RoomUserPo IRoomUserPoDo
	UserPo     IUserPoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		GamePo:     q.GamePo.WithContext(ctx),
		NoticePo:   q.NoticePo.WithContext(ctx),
		RoomPo:     q.RoomPo.WithContext(ctx),
		RoomUserPo: q.RoomUserPo.WithContext(ctx),
		UserPo:     q.UserPo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
