// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package base

import (
	"context"

	"gitea.hoven.com/billiard/billiard-assistant-server/pkg/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRecordPo(db *gorm.DB, opts ...gen.DOOption) recordPo {
	_recordPo := recordPo{}

	_recordPo.recordPoDo.UseDB(db, opts...)
	_recordPo.recordPoDo.UseModel(&model.RecordPo{})

	tableName := _recordPo.recordPoDo.TableName()
	_recordPo.ALL = field.NewAsterisk(tableName)
	_recordPo.ID = field.NewInt(tableName, "id")
	_recordPo.RoomID = field.NewInt(tableName, "room_id")
	_recordPo.GameType = field.NewInt(tableName, "game_type")
	_recordPo.Data = field.NewField(tableName, "data")
	_recordPo.CreatedAt = field.NewTime(tableName, "created_at")
	_recordPo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_recordPo.DeletedAt = field.NewField(tableName, "deleted_at")
	_recordPo.Room = recordPoBelongsToRoom{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Room", "model.RoomPo"),
		Game: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Room.Game", "model.GamePo"),
		},
		Owner: struct {
			field.RelationField
			RoomUsers struct {
				field.RelationField
				Room struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}
			UserAuthPos struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Room.Owner", "model.UserPo"),
			RoomUsers: struct {
				field.RelationField
				Room struct {
					field.RelationField
				}
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Room.Owner.RoomUsers", "model.RoomUserPo"),
				Room: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Room.Owner.RoomUsers.Room", "model.RoomPo"),
				},
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Room.Owner.RoomUsers.User", "model.UserPo"),
				},
			},
			UserAuthPos: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Room.Owner.UserAuthPos", "model.UserAuthPo"),
			},
		},
		RoomUsers: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Room.RoomUsers", "model.RoomUserPo"),
		},
	}

	_recordPo.fillFieldMap()

	return _recordPo
}

type recordPo struct {
	recordPoDo recordPoDo

	ALL       field.Asterisk
	ID        field.Int
	RoomID    field.Int
	GameType  field.Int
	Data      field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Room      recordPoBelongsToRoom

	fieldMap map[string]field.Expr
}

func (r recordPo) Table(newTableName string) *recordPo {
	r.recordPoDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recordPo) As(alias string) *recordPo {
	r.recordPoDo.DO = *(r.recordPoDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recordPo) updateTableName(table string) *recordPo {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt(table, "id")
	r.RoomID = field.NewInt(table, "room_id")
	r.GameType = field.NewInt(table, "game_type")
	r.Data = field.NewField(table, "data")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *recordPo) WithContext(ctx context.Context) IRecordPoDo { return r.recordPoDo.WithContext(ctx) }

func (r recordPo) TableName() string { return r.recordPoDo.TableName() }

func (r recordPo) Alias() string { return r.recordPoDo.Alias() }

func (r recordPo) Columns(cols ...field.Expr) gen.Columns { return r.recordPoDo.Columns(cols...) }

func (r *recordPo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recordPo) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["room_id"] = r.RoomID
	r.fieldMap["game_type"] = r.GameType
	r.fieldMap["data"] = r.Data
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt

}

func (r recordPo) clone(db *gorm.DB) recordPo {
	r.recordPoDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recordPo) replaceDB(db *gorm.DB) recordPo {
	r.recordPoDo.ReplaceDB(db)
	return r
}

type recordPoBelongsToRoom struct {
	db *gorm.DB

	field.RelationField

	Game struct {
		field.RelationField
	}
	Owner struct {
		field.RelationField
		RoomUsers struct {
			field.RelationField
			Room struct {
				field.RelationField
			}
			User struct {
				field.RelationField
			}
		}
		UserAuthPos struct {
			field.RelationField
		}
	}
	RoomUsers struct {
		field.RelationField
	}
}

func (a recordPoBelongsToRoom) Where(conds ...field.Expr) *recordPoBelongsToRoom {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a recordPoBelongsToRoom) WithContext(ctx context.Context) *recordPoBelongsToRoom {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a recordPoBelongsToRoom) Session(session *gorm.Session) *recordPoBelongsToRoom {
	a.db = a.db.Session(session)
	return &a
}

func (a recordPoBelongsToRoom) Model(m *model.RecordPo) *recordPoBelongsToRoomTx {
	return &recordPoBelongsToRoomTx{a.db.Model(m).Association(a.Name())}
}

type recordPoBelongsToRoomTx struct{ tx *gorm.Association }

func (a recordPoBelongsToRoomTx) Find() (result *model.RoomPo, err error) {
	return result, a.tx.Find(&result)
}

func (a recordPoBelongsToRoomTx) Append(values ...*model.RoomPo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a recordPoBelongsToRoomTx) Replace(values ...*model.RoomPo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a recordPoBelongsToRoomTx) Delete(values ...*model.RoomPo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a recordPoBelongsToRoomTx) Clear() error {
	return a.tx.Clear()
}

func (a recordPoBelongsToRoomTx) Count() int64 {
	return a.tx.Count()
}

type recordPoDo struct{ gen.DO }

type IRecordPoDo interface {
	gen.SubQuery
	Debug() IRecordPoDo
	WithContext(ctx context.Context) IRecordPoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecordPoDo
	WriteDB() IRecordPoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecordPoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecordPoDo
	Not(conds ...gen.Condition) IRecordPoDo
	Or(conds ...gen.Condition) IRecordPoDo
	Select(conds ...field.Expr) IRecordPoDo
	Where(conds ...gen.Condition) IRecordPoDo
	Order(conds ...field.Expr) IRecordPoDo
	Distinct(cols ...field.Expr) IRecordPoDo
	Omit(cols ...field.Expr) IRecordPoDo
	Join(table schema.Tabler, on ...field.Expr) IRecordPoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecordPoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecordPoDo
	Group(cols ...field.Expr) IRecordPoDo
	Having(conds ...gen.Condition) IRecordPoDo
	Limit(limit int) IRecordPoDo
	Offset(offset int) IRecordPoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordPoDo
	Unscoped() IRecordPoDo
	Create(values ...*model.RecordPo) error
	CreateInBatches(values []*model.RecordPo, batchSize int) error
	Save(values ...*model.RecordPo) error
	First() (*model.RecordPo, error)
	Take() (*model.RecordPo, error)
	Last() (*model.RecordPo, error)
	Find() ([]*model.RecordPo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordPo, err error)
	FindInBatches(result *[]*model.RecordPo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecordPo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecordPoDo
	Assign(attrs ...field.AssignExpr) IRecordPoDo
	Joins(fields ...field.RelationField) IRecordPoDo
	Preload(fields ...field.RelationField) IRecordPoDo
	FirstOrInit() (*model.RecordPo, error)
	FirstOrCreate() (*model.RecordPo, error)
	FindByPage(offset int, limit int) (result []*model.RecordPo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecordPoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recordPoDo) Debug() IRecordPoDo {
	return r.withDO(r.DO.Debug())
}

func (r recordPoDo) WithContext(ctx context.Context) IRecordPoDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordPoDo) ReadDB() IRecordPoDo {
	return r.Clauses(dbresolver.Read)
}

func (r recordPoDo) WriteDB() IRecordPoDo {
	return r.Clauses(dbresolver.Write)
}

func (r recordPoDo) Session(config *gorm.Session) IRecordPoDo {
	return r.withDO(r.DO.Session(config))
}

func (r recordPoDo) Clauses(conds ...clause.Expression) IRecordPoDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordPoDo) Returning(value interface{}, columns ...string) IRecordPoDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordPoDo) Not(conds ...gen.Condition) IRecordPoDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordPoDo) Or(conds ...gen.Condition) IRecordPoDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordPoDo) Select(conds ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordPoDo) Where(conds ...gen.Condition) IRecordPoDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordPoDo) Order(conds ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordPoDo) Distinct(cols ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordPoDo) Omit(cols ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordPoDo) Join(table schema.Tabler, on ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordPoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordPoDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordPoDo) Group(cols ...field.Expr) IRecordPoDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordPoDo) Having(conds ...gen.Condition) IRecordPoDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordPoDo) Limit(limit int) IRecordPoDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordPoDo) Offset(offset int) IRecordPoDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordPoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordPoDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordPoDo) Unscoped() IRecordPoDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordPoDo) Create(values ...*model.RecordPo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordPoDo) CreateInBatches(values []*model.RecordPo, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordPoDo) Save(values ...*model.RecordPo) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordPoDo) First() (*model.RecordPo, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordPo), nil
	}
}

func (r recordPoDo) Take() (*model.RecordPo, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordPo), nil
	}
}

func (r recordPoDo) Last() (*model.RecordPo, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordPo), nil
	}
}

func (r recordPoDo) Find() ([]*model.RecordPo, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecordPo), err
}

func (r recordPoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordPo, err error) {
	buf := make([]*model.RecordPo, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordPoDo) FindInBatches(result *[]*model.RecordPo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordPoDo) Attrs(attrs ...field.AssignExpr) IRecordPoDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordPoDo) Assign(attrs ...field.AssignExpr) IRecordPoDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordPoDo) Joins(fields ...field.RelationField) IRecordPoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordPoDo) Preload(fields ...field.RelationField) IRecordPoDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordPoDo) FirstOrInit() (*model.RecordPo, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordPo), nil
	}
}

func (r recordPoDo) FirstOrCreate() (*model.RecordPo, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordPo), nil
	}
}

func (r recordPoDo) FindByPage(offset int, limit int) (result []*model.RecordPo, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordPoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recordPoDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recordPoDo) Delete(models ...*model.RecordPo) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recordPoDo) withDO(do gen.Dao) *recordPoDo {
	r.DO = *do.(*gen.DO)
	return r
}
